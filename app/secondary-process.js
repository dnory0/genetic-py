"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os-utils");
let timeChecker;
let timer = null;
let tempTimer = null;
let pauseTimer = null;
let accPauseTimer = [0, 0];
let sendTime = true;
function startTimeCalc() {
    timer = process.hrtime();
    timeChecker = setInterval(() => {
        if (!sendTime)
            return;
        tempTimer = process.hrtime(timer);
        tempTimer = [
            tempTimer[1] - accPauseTimer[1] < 0
                ? tempTimer[0] - accPauseTimer[0] - 1
                : tempTimer[0] - accPauseTimer[0],
            tempTimer[1] - accPauseTimer[1] < 0
                ? tempTimer[1] + 1000000000 - accPauseTimer[1]
                : tempTimer[1] - accPauseTimer[1]
        ];
        process.send(`time: ${Math.trunc(tempTimer[0] / 3600) < 10
            ? `0${Math.trunc(tempTimer[0] / 3600)}`
            : `${Math.trunc(tempTimer[0] / 3600)}`}:${Math.trunc((tempTimer[0] % 3600) / 60) < 10
            ? `0${Math.trunc((tempTimer[0] % 3600) / 60)}`
            : `${Math.trunc((tempTimer[0] % 3600) / 60)}`}:${tempTimer[0] % 60 < 10
            ? `0${tempTimer[0] % 60}`
            : `${tempTimer[0] % 60}`}:${tempTimer[1] < 100000000
            ? `0${Math.trunc(tempTimer[1] / 10000000)}`
            : `${Math.trunc(tempTimer[1] / 10000000)}`}`);
    }, 70);
}
function pauseTimeCalc() {
    sendTime = false;
    pauseTimer = process.hrtime();
}
function resumeTimeCalc() {
    pauseTimer = process.hrtime(pauseTimer);
    accPauseTimer = [
        1000000000 <= accPauseTimer[1] + pauseTimer[1]
            ? accPauseTimer[0] + pauseTimer[0] + 1
            : accPauseTimer[0] + pauseTimer[0],
        1000000000 < accPauseTimer[1] + pauseTimer[1]
            ? accPauseTimer[1] + pauseTimer[1] - 1000000000
            : accPauseTimer[1] + pauseTimer[1]
    ];
    sendTime = true;
}
function finishTimeCalc() {
    if (timeChecker)
        clearInterval(timeChecker);
    process.send('time-finished');
    pauseTimer = null;
    accPauseTimer = [0, 0];
    sendTime = true;
}
setInterval(() => os.cpuUsage((v) => {
    process.send(`cpuusage: ${v < 0.1 ? `0${Math.trunc(v * 100)}` : `${Math.trunc(v * 100)}`}`);
}), 1000);
process.on('message', (message) => {
    if (message.includes('start'))
        startTimeCalc();
    else if (message.includes('pause'))
        pauseTimeCalc();
    else if (message.includes('resume'))
        resumeTimeCalc();
    else if (message.includes('finish'))
        finishTimeCalc();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vjb25kYXJ5LXByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWNvbmRhcnktcHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWFBLCtCQUErQjtBQUcvQixJQUFJLFdBQTJCLENBQUM7QUFFaEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRWpCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztBQUVyQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFFdEIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFHM0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBTXBCLFNBQVMsYUFBYTtJQUNwQixLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLFdBQVcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO1FBQzdCLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUN0QixTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxTQUFTLEdBQUc7WUFDVixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNuQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLENB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