"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const python_shell_1 = require("python-shell");
const path = require("path");
const Chart = require("chart.js");
let playBtn = document.getElementById('play-btn');
let stopBtn = document.getElementById('stop-btn');
let backToStartBtn = (document.getElementById('back-to-start-btn'));
let stepForwardBtn = (document.getElementById('step-forward-btn'));
let args = [
    '64',
    '120'
];
let isPyShellRunning = false;
let pyshell;
let progressChart;
let fittestChart;
let genesNum;
let deleteResult = true;
let close = true;
electron_1.webFrame.setZoomLevel(0);
electron_1.webFrame.setZoomFactor(1);
const createChart = (canvas, { options: { title: { text }, animation: { duration }, devicePixelRatio } }) => {
    return new Chart(canvas, {
        type: 'line',
        data: {
            datasets: [
                {
                    label: 'Progress',
                    fill: 'rgba(0,0,0,0)',
                    backgroundColor: '#3572A5',
                    borderColor: '#3572A5',
                    borderWidth: 2,
                    lineTension: 0
                }
            ]
        },
        options: {
            title: {
                display: true,
                position: 'bottom',
                text
            },
            animation: {
                duration: duration ? duration : 0
            },
            devicePixelRatio: devicePixelRatio ? devicePixelRatio : 2,
            elements: {
                point: {
                    borderWidth: 3
                }
            },
            tooltips: {
                enabled: false
            }
        }
    });
};
const terminatePyShell = (callbackfn) => {
    isPyShellRunning = false;
    console.log('closed here');
    pyshell.end(() => {
        if (callbackfn)
            callbackfn();
    });
};
const activateTooltips = (chart) => {
    chart.options.tooltips.enabled = !isPyShellRunning;
};
const clearChart = (chart) => {
    chart.data.labels = [];
    chart.data.datasets[0].data = [];
    chart.update();
};
const startPythonShell = () => {
    close = false;
    clearChart(progressChart);
    clearChart(fittestChart);
    pyshell = new python_shell_1.PythonShell('genetic_algorithm.py', {
        scriptPath: path.join(__dirname, 'python'),
        pythonOptions: ['-u'],
        args: args
    });
    pyshell.on('message', (...args) => {
        if (close) {
            console.log('should be closed');
            pyshell.send('terminate');
        }
        else if (args[0].includes('generation')) {
            if (args[0].includes('found')) {
                progressChart.data.labels.push(args[0].substr(19));
                fittestChart.data.labels.push(args[0].substr(19));
            }
            else {
                progressChart.data.labels.push(args[0].substr(12));
                fittestChart.data.labels.push(args[0].substr(12));
            }
        }
        else if (args[0].includes('fitness')) {
            if (args[0].includes('found')) {
                progressChart.data.datasets[0].data.push(parseInt(args[0].substr(22)));
                fittestChart.data.datasets[0].data.push(parseInt(args[0].substr(22)));
            }
            else {
                progressChart.data.datasets[0].data.push(parseInt(args[0].substr(15)));
                fittestChart.data.datasets[0].data.push(parseInt(args[0].substr(15)));
            }
        }
        else if (args[0].includes('genes')) {
            clearChart(fittestChart);
            genesNum = [...Array(64).keys()].map(x => ++x);
            fittestChart.data.labels = genesNum.map(x => `${x}`);
            fittestChart.data.datasets[0].data = args[0].includes('found')
                ? args[0]
                    .substr(20)
                    .split('')
                    .map(x => parseInt(x))
                : args[0]
                    .substr(13)
                    .split('')
                    .map(x => parseInt(x));
            progressChart.update();
            fittestChart.update();
            if (isPyShellRunning && !args[0].includes('found'))
                pyshell.send('');
        }
        else if (args[0].includes('finished')) {
            console.log('finished');
            clearChart(progressChart);
            clearChart(fittestChart);
            setBtnsClickable(false);
            terminatePyShell();
            switchPlayPauseBtn();
            blinkPlayBtn();
            resetTime();
        }
    });
    pyshell.on('error', err => console.error(`error trace: ${err}`));
    pyshell.on('close', () => console.log('closed: '));
};
const switchPlayPauseBtn = () => {
    if (isPyShellRunning) {
        playBtn.querySelector('.play').style.display = 'none';
        playBtn.querySelector('.pause').style.display = 'block';
    }
    else {
        playBtn.querySelector('.play').style.display = 'block';
        playBtn.querySelector('.pause').style.display = 'none';
    }
};
const setBtnsClickable = (clickable = true) => {
    Array.from(document.querySelector('.controls').children).forEach((element, index) => {
        if (index == 0)
            return;
        if (clickable)
            element.classList.remove('disabled-btn');
        else
            element.classList.add('disabled-btn');
        element.disabled = !clickable;
    });
};
const blinkPlayBtn = () => {
    playBtn.classList.add('disabled-btn');
    playBtn.disabled = true;
    setTimeout(() => {
        playBtn.classList.remove('disabled-btn');
        playBtn.disabled = false;
    }, 400);
};
const resetTime = (v = false) => {
    notifyTimer('finish');
    deleteResult = v;
};
const notifyTimer = (state) => {
    electron_1.ipcRenderer.send('time', state);
};
let progressCtx = document.getElementById('progress-chart');
progressChart = createChart(progressCtx, {
    options: {
        title: {
            text: 'Fittest For every Generation'
        },
        maintainAspectRatio: false,
        responsive: true,
        animation: {
            duration: 100
        }
    }
});
let fittestCtx = document.getElementById('fittest-chart');
fittestChart = createChart(fittestCtx, {
    options: {
        title: {
            text: 'Fittest Individual Genes'
        },
        animation: {
            duration: 200
        }
    }
});
playBtn.onclick = () => {
    isPyShellRunning = !isPyShellRunning;
    if (!pyshell) {
        clearChart(progressChart);
        startPythonShell();
        switchPlayPauseBtn();
        setBtnsClickable();
        notifyTimer('start');
    }
    else {
        if (isPyShellRunning) {
            pyshell.send('');
            notifyTimer('resume');
            switchPlayPauseBtn();
        }
        else {
            notifyTimer('pause');
            switchPlayPauseBtn();
        }
    }
    activateTooltips(progressChart);
};
stopBtn.onclick = () => {
    resetTime(true);
    clearChart(progressChart);
    clearChart(fittestChart);
    setBtnsClickable(false);
    terminatePyShell();
    switchPlayPauseBtn();
};
backToStartBtn.onclick = () => {
    close = true;
    terminatePyShell(() => {
        resetTime(true);
        playBtn.click();
    });
};
stepForwardBtn.onclick = () => {
    if (isPyShellRunning)
        playBtn.click();
    pyshell.send('');
};
electron_1.ipcRenderer.on('time', (_event, time) => {
    document.getElementById('time').innerHTML = time;
});
electron_1.ipcRenderer.on('cpuusage', (_event, cpuusage) => {
    document.getElementById('cpuusage').innerHTML = cpuusage;
});
electron_1.ipcRenderer.on('time-finished', () => {
    if (deleteResult)
        document.getElementById('time').innerHTML = '00:00:00:00';
});
notifyTimer('finish');
//# sourceMappingURL=data:application/json;base64,